{
  "format_version": "1.8.0",
  "animations": {
    "animation.villager_with_player_model.look_at_target.default": {
      "loop": true,
      "bones": {
        "head": {
          "relative_to": {
            "rotation": "entity"
          },
          "rotation": [
            "query.target_x_rotation",
            "query.target_y_rotation",
            0
          ]
        }
      }
    },
    "animation.villager_with_player_model.look_at_target.gliding": {
      "loop": true,
      "bones": {
        "head": {
          "rotation": [
            -45,
            "query.target_y_rotation",
            0
          ]
        }
      }
    },
    "animation.villager_with_player_model.look_at_target.swimming": {
      "loop": true,
      "bones": {
        "head": {
          "rotation": [
            "math.lerp(query.target_x_rotation, -45.0, variable.swim_amount)",
            "query.target_y_rotation",
            0
          ]
        }
      }
    },
    "animation.villager_with_player_model.move": {
      "loop": true,
      "bones": {
        "leftarm": {
          "rotation": [
            "variable.tcos0",
            0,
            0
          ]
        },
        "leftleg": {
          "rotation": [
            "variable.tcos0 * -1.4",
            0,
            0
          ]
        },
        "rightarm": {
          "rotation": [
            "-variable.tcos0",
            0,
            0
          ]
        },
        "rightleg": {
          "rotation": [
            "variable.tcos0 * 1.4",
            0,
            0
          ]
        }
      }
    },
    "animation.villager_with_player_model.riding.arms": {
      "loop": true,
      "bones": {
        "leftarm": {
          "rotation": [
            -36,
            0,
            0
          ]
        },
        "rightarm": {
          "rotation": [
            -36,
            0,
            0
          ]
        }
      }
    },
    "animation.villager_with_player_model.riding.legs": {
      "loop": true,
      "bones": {
        "leftleg": {
          "rotation": [
            "-72.0 - this",
            "-18.0 - this",
            "-this"
          ]
        },
        "rightleg": {
          "rotation": [
            "-72.0 - this",
            "18.0 - this",
            "-this"
          ]
        }
      }
    },
    "animation.villager_with_player_model.holding": {
      "loop": true,
      "bones": {
        "leftarm": {
          "rotation": [
            "variable.is_holding_left ? (-this * 0.5 - 18.0) : 0.0",
            0,
            0
          ]
        },
        "rightarm": {
          "rotation": [
            "variable.is_holding_right ? (-this * 0.5 - 18.0) : 0.0",
            0,
            0
          ]
        }
      }
    },
    "animation.villager_with_player_model.brandish_spear": {
      "loop": true,
      "bones": {
        "rightarm": {
          "rotation": [
            "this * -0.5 - 143.5 - 22.5 * variable.charge_amount",
            "-this",
            "-((math.cos(query.life_time * 103.2) * 2.865) + 2.865)"
          ]
        }
      }
    },
    "animation.villager_with_player_model.charging": {
      "loop": true,
      "bones": {
        "rightarm": {
          "rotation": [
            "22.5 * variable.charge_amount - this",
            "-this",
            0
          ]
        }
      }
    },
    "animation.villager_with_player_model.attack.rotations": {
      "loop": true,
      "bones": {
        "body": {
          "rotation": [
            0,
            "math.sin(math.sqrt(variable.attack_time) * 360) * 11.46 - this",
            0
          ]
        },
        "leftarm": {
          "rotation": [
            "math.sin(math.sqrt(variable.attack_time) * 360) * 11.46",
            0,
            0
          ]
        },
        "rightarm": {
          "rotation": [
            "math.sin(1.0 - math.pow(1.0 - variable.attack_time, 3.0) * 180.0) * (variable.is_brandishing_spear || variable.is_holding_spyglass ? -1.0 : 1.0 )",
            "variable.is_brandishing_spear || variable.is_holding_spyglass ? 0.0 : (math.sin(math.sqrt(variable.attack_time) * 360) * 11.46) * 2.0",
            0
          ]
        }
      }
    },
    "animation.villager_with_player_model.sneaking": {
      "loop": true,
      "bones": {
        "body": {
          "rotation": [
            "0.5 - this",
            0,
            0
          ]
        },
        "head": {
          "position": [
            0,
            1,
            0
          ]
        },
        "leftarm": {
          "rotation": [
            72,
            0,
            0
          ]
        },
        "leftleg": {
          "position": [
            0,
            -3,
            4
          ]
        },
        "rightarm": {
          "rotation": [
            72,
            0,
            0
          ]
        },
        "rightleg": {
          "position": [
            0,
            -3,
            4
          ]
        }
      }
    },
    "animation.villager_with_player_model.bob": {
      "loop": true,
      "bones": {
        "leftarm": {
          "rotation": [
            0,
            0,
            "((math.cos(query.life_time * 103.2) * 2.865) + 2.865) *-1.0"
          ]
        },
        "rightarm": {
          "rotation": [
            0,
            0,
            "(math.cos(query.life_time * 103.2) * 2.865) + 2.865"
          ]
        }
      }
    },
    "animation.villager_with_player_model.damage_nearby_mobs": {
      "loop": true,
      "bones": {
        "leftarm": {
          "rotation": [
            "-45.0-this",
            "-this",
            "-this"
          ]
        },
        "leftleg": {
          "rotation": [
            "45.0-this",
            "-this",
            "-this"
          ]
        },
        "rightarm": {
          "rotation": [
            "45.0-this",
            "-this",
            "-this"
          ]
        },
        "rightleg": {
          "rotation": [
            "-45.0-this",
            "-this",
            "-this"
          ]
        }
      }
    },
    "animation.villager_with_player_model.bow_and_arrow": {
      "loop": true,
      "bones": {
        "leftarm": {
          "rotation": [
            "query.target_x_rotation - 90.0 - math.sin(query.life_time * 76.8) * 2.865 - this",
            "query.target_y_rotation + 28.65",
            "-(math.cos(query.life_time * 103.2) * 2.865) - 2.865"
          ]
        },
        "rightarm": {
          "rotation": [
            "query.target_x_rotation - 90.0 + math.sin(query.life_time * 76.8) * 2.865 - this",
            "query.target_y_rotation - 5.73",
            "(math.cos(query.life_time * 103.2) * 2.865) + 2.865"
          ]
        }
      }
    },
    "animation.villager_with_player_model.swimming": {
      "animation_length": 1.3,
      "loop": true,
      "bones": {
        "leftarm": {
          "rotation": {
            "0.7": {
              "post": [
                "math.lerp(this, 11.25 * math.mod(query.modified_distance_moved, 26.0), variable.leftarmswim_amount)",
                "math.lerp(this, 180.0, variable.leftarmswim_amount)",
                "math.lerp(this, 72.77 + 13.4 * math.mod(query.modified_distance_moved, 26.0), variable.leftarmswim_amount)"
              ],
              "pre": [
                "math.lerp(this, 0.0, variable.leftarmswim_amount)",
                "math.lerp(this, 180.0, variable.leftarmswim_amount)",
                "math.lerp(this, 180.0 - 0.01877 * (-65.0 * math.mod(query.modified_distance_moved, 26.0) + math.mod(query.modified_distance_moved, 26.0) * math.mod(query.modified_distance_moved, 26.0)), variable.leftarmswim_amount)"
              ]
            },
            "1.1": [
              "math.lerp(this, 11.25 * math.mod(query.modified_distance_moved, 26.0), variable.leftarmswim_amount)",
              "math.lerp(this, 180.0, variable.leftarmswim_amount)",
              "math.lerp(this, 72.77 + 13.4 * math.mod(query.modified_distance_moved, 26.0), variable.leftarmswim_amount)"
            ],
            "1.3": {
              "post": [
                "math.lerp(this, 90.0 - (22.5 * math.mod(query.modified_distance_moved, 26.0)), variable.leftarmswim_amount)",
                "math.lerp(this, 180.0, variable.leftarmswim_amount)",
                "math.lerp(this, 180.0, variable.leftarmswim_amount)"
              ],
              "pre": [
                "math.lerp(this, 11.25 * math.mod(query.modified_distance_moved, 26.0), variable.leftarmswim_amount)",
                "math.lerp(this, 180.0, variable.leftarmswim_amount)",
                "math.lerp(this, 72.77 + 13.4 * math.mod(query.modified_distance_moved, 26.0), variable.leftarmswim_amount)"
              ]
            }
          }
        },
        "leftleg": {
          "rotation": [
            "math.lerp(this, math.cos(query.modified_distance_moved * 19.5 + 180.0) * 17.2, variable.leftarmswim_amount) - this",
            0,
            0
          ]
        },
        "rightarm": {
          "rotation": {
            "0.7": {
              "post": [
                "math.lerp(this, 11.25 * math.mod(query.modified_distance_moved, 26.0), variable.rightarmswim_amount)",
                "math.lerp(this, 180.0, variable.rightarmswim_amount)",
                "math.lerp(this, 72.77 + 13.4 * math.mod(query.modified_distance_moved, 26.0), variable.rightarmswim_amount)"
              ],
              "pre": [
                "math.lerp(this, 0.0, variable.rightarmswim_amount)",
                "math.lerp(this, 180.0, variable.rightarmswim_amount)",
                "math.lerp(this, -0.1019 * (-65.0 * math.mod(query.modified_distance_moved, 26.0) + math.mod(query.modified_distance_moved, 26.0) * math.mod(query.modified_distance_moved, 26.0)), variable.rightarmswim_amount)"
              ]
            },
            "1.1": [
              "math.lerp(this, 11.25 * math.mod(query.modified_distance_moved, 26.0), variable.rightarmswim_amount)",
              "math.lerp(this, 180.0, variable.rightarmswim_amount)",
              "math.lerp(this, 72.77 + 13.4 * math.mod(query.modified_distance_moved, 26.0), variable.rightarmswim_amount)"
            ],
            "1.3": {
              "post": [
                "math.lerp(this, 90.0 - (22.5 * math.mod(query.modified_distance_moved, 26.0)), variable.rightarmswim_amount)",
                "math.lerp(this, 180.0, variable.rightarmswim_amount)",
                "math.lerp(this, 180.0, variable.rightarmswim_amount)"
              ],
              "pre": [
                "math.lerp(this, 11.25 * math.mod(query.modified_distance_moved, 26.0), variable.rightarmswim_amount)",
                "math.lerp(this, 180.0, variable.rightarmswim_amount)",
                "math.lerp(this, 72.77 + 13.4 * math.mod(query.modified_distance_moved, 26.0), variable.rightarmswim_amount)"
              ]
            }
          }
        },
        "rightleg": {
          "rotation": [
            "math.lerp(this, math.cos(query.modified_distance_moved * 19.5) * 17.2, variable.leftarmswim_amount) - this",
            0,
            0
          ]
        }
      }
    },
    "animation.villager_with_player_model.use_item_progress": {
      "loop": true,
      "bones": {
        "rightarm": {
          "rotation": [
            "variable.use_item_startup_progress * -60.0 + variable.use_item_interval_progress * 11.25",
            "variable.use_item_startup_progress * -22.5 + variable.use_item_interval_progress * 11.25",
            "variable.use_item_startup_progress * -5.625 + variable.use_item_interval_progress * 11.25"
          ]
        }
      }
    },
    "animation.villager_with_player_model.attack": {
      "loop": true,
      "bones": {
        "leftarm": {
          "rotation": [
            "-68.75 * math.sin(variable.attack_time * 180.0) + 22.92 * (math.sin((1.0 - (1.0 - variable.attack_time) * (1.0 - variable.attack_time)) * 180.0)) - 90.0 - this",
            "5.73 - math.sin(variable.attack_time * 180.0) * 34.38 - this",
            "-this"
          ]
        },
        "rightarm": {
          "rotation": [
            "-68.75 * math.sin(variable.attack_time * 180.0) + 22.92 * (math.sin((1.0 - (1.0 - variable.attack_time) * (1.0 - variable.attack_time)) * 180.0)) - 90.0 - this",
            "-5.73 + math.sin(variable.attack_time * 180.0) * 34.38 - this",
            "-this"
          ]
        }
      }
    }
  }
}